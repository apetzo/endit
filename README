ENDIT - Efficient Northern Dcache Interface to TSM

Concept

Use the same filesystem as an HSM staging area, using hardlinks to "store"
data and then use batch processes to archive and restore data to/from tape.

Configuration

Since both store and retrieve uses the same filesystem for staging, you
can't use the full filesystem size as poolsize to dcache. In fact, you
need to have the poolsize small enough that the "maxusage" throttling
parameter fits in the expression:
$pool_size + $maxusage + sum(other pools) << $fs_size

For store performance, it is good to have a fairly large gap between poolsize
and maxusage, for restore performance it is good to have a large poolsize.
My rule of thumb is to chop the filesystem into a third for poolsize and
maxusage at most of the remaining space.

Since this solution stores with a quick hardlink, the best dcache configuration
is to store files into hsm as soon as possible. The batching into large stores
needed for tape efficiency is done in archiver.pl.

To get any efficiency in retrieves, you need to allow a large number of
concurrent restores and have a long timeout for them.

If you run multiple pools, you need to mount the "out" directories from
all pools writing into TSM on all pools reading from TSM and define this
in @remotedirs, otherwise there is a risk that a file will be incorrectly
seen as unavailable in the interval between "endit.pl put" hardlinks and
that the "tsmarchiver.pl" process has fully migrated it to tape.

After starting dcache you also need to start the three scripts:
tsmarchiver.pl
tsmretriever.pl
tsmdeleter.pl

Collaboration

It's all healthy perl, no icky surprises, I hope. Patches, suggestions, etc are
most welcome.


Mattias Wadenstein <maswan@hpc2n.umu.se>
